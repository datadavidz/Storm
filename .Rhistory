mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs =0.99)
top_unique <- filter(pack_sum, unique > 465)
View()
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
quit()
library("nlme", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("lattice")
library("lattice", lib.loc="~/R/win-library/3.1")
library("nlme", lib.loc="C:/Program Files/R/R-3.1.1/library")
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set
library("datasets", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.1")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies)
?qplot
?geom_smooth
?qplot
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
?geom_smooth
qplot(votes, rating, data = movies) + geom_smooth()
library(caret)
library(MASS)
data(iris)
TrainData <- iris[,1:4]
TrainClasses <- iris[,5]
nnetFit <- train(TrainData, TrainClasses,
method = "nnet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
library(nnet)
nnetFit <- train(TrainData, TrainClasses,
method = "nnet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
install.packages("e1071")
nnetFit <- train(TrainData, TrainClasses,
method = "nnet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
head(dat)
source('~/R/NN/caretnn_ex1.R', echo=TRUE)
source('~/R/NN/caretnn_ex1.R', echo=TRUE)
source('~/R/NN/caretnn_ex1.R')
data(iris3)
source('~/.active-rstudio-document')
source('~/R/NN/caretnn_ex2.R')
print(nrow(train.set)/nrow(test.set)) # should be around 3
source('~/R/NN/caretnn_ex2.R')
source('~/R/NN/caretnn_ex2.R')
source('~/R/NN/caretnn_ex2.R')
source('~/R/NN/caretnn_ex2.R')
source('~/.active-rstudio-document', echo=TRUE)
names(storm.data)
head(select(storm.data, EVTYPE, FATALITIES, INJURIES))
library(dplyr)
head(select(storm.data, EVTYPE, FATALITIES, INJURIES))
health <- select(storm.data, EVTYPE, FATALITIES, INJURIES)
health <- group_by(health, EVTYPE)
summarize(health, FATALITIES = SUM(FATALITIES), INJURIES = SUM(INJURIES))
summarize(health, FATALITIES = sum(FATALITIES), INJURIES = sum(INJURIES))
health <- summarize(health, FATALITIES = sum(FATALITIES), INJURIES = sum(INJURIES))
arrange(health, desc(FATALITIES), desc(INJURIES))
?plot
?barplot
barplot(health$FATALITIES[1:10])
barplot(health$FATALITIES)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(health)
source('~/.active-rstudio-document', echo=TRUE)
barplot(health$FATALITIES[1:10])
library(ggplot2)
bp <- with(health, ggplot(data=FATALITIES[1:10], aes(x=EVTYPE[1:10],y=FATALITIES[1:10]), geombar())
)
bp <- ggplot(data=health, aes(x=EVTYPE[1:10],y=FATALITIES[1:10]), geombar())
print(bp)
bp <- ggplot(data=health, aes(x=EVTYPE[1:10],y=FATALITIES[1:10])) + geombar())
bp <- ggplot(data=health, aes(x=EVTYPE[1:10],y=FATALITIES[1:10])) + geombar()
bp <- ggplot(data=health, aes(x=EVTYPE[1:10],y=FATALITIES[1:10])) + geom_bar()
print(bp)
ggplot(data=health[1:10,], aes(x=EVTYPE,y=FATALITIES)) + geombar()
ggplot(data=health[1:10,], aes(x=EVTYPE,y=FATALITIES)) + geom_bar()
health[1:10,]
ggplot(data=health[1:10,], aes(x=EVTYPE,y=FATALITIES)) + geom_bar(stat="identity")
str(health)
health$EVTYPE <- as.character(health$EVTYPE)
health$EVTYPE <- factor(health$EVTYPE, levels=unique(health$EVTYPE))
str(health)
ggplot(data=health[1:10,], aes(x=EVTYPE,y=FATALITIES)) + geom_bar(stat="identity")
summary(storm.data)
source('~/.active-rstudio-document', echo=TRUE)
head(health)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(storm.data)
source('~/.active-rstudio-document', echo=TRUE)
head(economy)
source('~/.active-rstudio-document', echo=TRUE)
head(economy)
source('~/.active-rstudio-document', echo=TRUE)
head(economy)
source('~/.active-rstudio-document', echo=TRUE)
summary(storm.data$EVTYPE)
health
?gsub
gsub("^THUNDERSTORM", "TSTM", storm.data$EVTYPE)
storm.rev <- gsub("^THUNDERSTORM", "TSTM", storm.data$EVTYPE)
summary(storm.rev)
str(storm.rev)
as.factor(storm.rev)
storm.rev <- as.factor(storm.rev)
summary(storm.rev)
storm.data$EVTYPE <- gsub("^THUNDERSTORM", "TSTM", storm.data$EVTYPE)
summary(storm.data$EVTYPE)
storm.data$EVTYPE <- as.factor(gsub("^THUNDERSTORM", "TSTM", storm.data$EVTYPE))
summary(storm.data$EVTYPE)
storm.data$EVTYPE <- as.factor(gsub("^THUNDERSTORM", "TSTM", storm.data$EVTYPE))
source('~/.active-rstudio-document', echo=TRUE)
summary(storm.data$EVTYPE)
source('~/.active-rstudio-document', echo=TRUE)
summary(storm.data$EVTYPE)
source('~/.active-rstudio-document', echo=TRUE)
summary(storm.data$EVTYPE)
head(health)
library(reshape2)
melt(health, id = c("EVTYPE", "EVENTS"), measure.vars = c("FATALITIES","INJURIES"))
health.new <- melt(health, id = c("EVTYPE", "EVENTS"), measure.vars = c("FATALITIES","INJURIES"))
str(health.new)
head(health.new)
ggplot(data=health.new[1:5,], aes(x=EVTYPE,y=value, fill=variable)) + geom_bar(stat="identity")
topfive <- health.new$EVTYPE[1:5]
topfive
topfive <- as.character(health.new$EVTYPE[1:5])
health.new(topfive,)
health.new[topfive,]
topfive <- health.new$EVTYPE[1:5]
health.new[topfive,]
health[topfive]
tail(health.new)
health.new[health.new$EVTYPE == topfive,]
health.new[health.new$EVTYPE == as.character(topfive),]
health.new[health.new$EVTYPE == "TORNADO",]
health.new[health.new$EVTYPE %in% topfive,]
health.new <- health.new[health.new$EVTYPE %in% topfive,]
ggplot(data=health.new, aes(x=EVTYPE,y=value, fill=variable)) + geom_bar(stat="identity")
ggplot(data=health.new, aes(x=EVTYPE,y=value)) + geom_bar(stat="identity") + facet_wrap(~variable)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(health,10)
health.new <- health[1:5,]
health.new
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data=health.topfive, aes(x=EVTYPE, y=value, fill=variable)) + geom_bar(stat="identity")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data=health.topfive, aes(x=EVTYPE, y=value, fill=variable)) + geom_bar(stat="identity")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
economy.topfive
library(ggplot2)
ggplot(data=health.topfive, aes(x=EVTYPE, y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Health Impact") +
xlab("Event Type") +
ylab("# of Injuries & Fatalities")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("$ Cost of Storm Damage")
summary(storm.data$PROPDMGEXP)
summary(storm.data$cROPDMGEXP)
summary(storm.data$CROPDMGEXP)
summary(storm.data)
head(select(storm.data, PROPDMGEXP, CROPDMGEXP))
head(select(storm.data, PROPDMG, CROPDMG))
SUMMARY(storm.data$PROPDMGEXP)
summary(storm.data$PROPDMGEXP)
setwd("c:/Users/David/Documents/GitHub/Storm/")
if (!exists("storm.data")) {
storm.data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"))
}
storm.data$EVTYPE <- as.factor(gsub("THUNDERSTORM", "TSTM", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("WINDS", "WIND", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("FLOODING", "FLOOD", storm.data$EVTYPE))
storm.data$PROPDMGEXP <- gsub("K", "1000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("B", "1000000000", storm.data$PROPDMGEXP)
summary(storm.data$PROPDMGEXP)
summary(as.factor(storm.data$PROPDMGEXP)
)
setwd("c:/Users/David/Documents/GitHub/Storm/")
if (!exists("storm.data")) {
storm.data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"))
}
storm.data$EVTYPE <- as.factor(gsub("THUNDERSTORM", "TSTM", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("WINDS", "WIND", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("FLOODING", "FLOOD", storm.data$EVTYPE))
storm.data$PROPDMGEXP <- gsub("[^HhKMmB]", "1", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Hh]", "100", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("K", "1000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("B", "1000000000", storm.data$PROPDMGEXP)
summary(as.factor(storm.data$PROPDMGEXP)
)
setwd("c:/Users/David/Documents/GitHub/Storm/")
if (!exists("storm.data")) {
storm.data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"))
}
storm.data$EVTYPE <- as.factor(gsub("THUNDERSTORM", "TSTM", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("WINDS", "WIND", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("FLOODING", "FLOOD", storm.data$EVTYPE))
storm.data$PROPDMGEXP <- gsub("[^HhKMmB]", "1", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("[Hh]", "100", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("K", "1000", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("B", "1000000000", storm.data$PROPDMGEXP)
summary(as.factor(storm.data$PROPDMGEXP))
storm.data$PROPDMGEXP <- gsub("", "1", storm.data$PROPDMGEXP)
summary(as.factor(storm.data$PROPDMGEXP))
setwd("c:/Users/David/Documents/GitHub/Storm/")
if (!exists("storm.data")) {
storm.data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"))
}
storm.data$EVTYPE <- as.factor(gsub("THUNDERSTORM", "TSTM", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("WINDS", "WIND", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("FLOODING", "FLOOD", storm.data$EVTYPE))
storm.data$PROPDMGEXP <- gsub("[^HhKMmB]", "1", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("[Hh]", "100", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("K", "1000", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("B", "1000000000", storm.data$PROPDMGEXP)
summary(as.factor(storm.data$PROPDMGEXP))
storm.data$PROPDMGEXP[nchar(storm.data$PROPDMGEXP == 0)] <- "1"
summary(as.factor(storm.data$PROPDMGEXP))
tail(storm.data)
tail(storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP = " "
storm.data$PROPDMGEXP == " "
sum(storm.data$PROPDMGEXP == " ")
sum(storm.data$PROPDMGEXP == "  ")
sum(storm.data$PROPDMGEXP == "")
sum(storm.data$PROPDMGEXP == "\t")
sum(storm.data$PROPDMGEXP == "K")
sum(as.character(storm.data$PROPDMGEXP) == "K")
sum(as.character(storm.data$PROPDMGEXP) == "k")
summary(as.factor(storm.data$PROPDMGEXP))
printZ(storm.data$PROPDMGEXP)
print(storm.data$PROPDMGEXP)
summary(as.factor(storm.data$PROPDMGEXP))
setwd("c:/Users/David/Documents/GitHub/Storm/")
if (!exists("storm.data")) {
storm.data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"))
}
storm.data$EVTYPE <- as.factor(gsub("THUNDERSTORM", "TSTM", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("WINDS", "WIND", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("FLOODING", "FLOOD", storm.data$EVTYPE))
storm.data$PROPDMGEXP <- gsub("[^HhKMmB]", "1", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("[Hh]", "100", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("K", "1000", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$PROPDMGEXP)
#storm.data$PROPDMGEXP <- gsub("B", "1000000000", storm.data$PROPDMGEXP)
summary(as.factor(storm.data$PROPDMGEXP))
sum(storm.data$PROPDMGEXP == "")
storm.data$PROPDMGEXP[storm.data$PROPDMGEXP == ""] <- "1"
summary(as.factor(storm.data$PROPDMGEXP))
setwd("c:/Users/David/Documents/GitHub/Storm/")
if (!exists("storm.data")) {
storm.data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"))
}
# Some adjustment of event names to prevent major splitting of the data
storm.data$EVTYPE <- as.factor(gsub("THUNDERSTORM", "TSTM", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("WINDS", "WIND", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("FLOODING", "FLOOD", storm.data$EVTYPE))
# Conversion of the expense units into multiplication factor
storm.data$PROPDMGEXP <- gsub("[^HhKMmB]", "1", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Hh]", "100", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("K", "1000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("B", "1000000000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP[storm.data$PROPDMGEXP == ""] <- "1"
storm.data$PROPDMGEXP <- as.numeric(storm.data$PROPDMGEXP)
summary(storm.data$PROPDMGEXP)
summary(storm.data$CROPDMGEXP)
summary(storm.data$CROPDMGEXP)
setwd("c:/Users/David/Documents/GitHub/Storm/")
if (!exists("storm.data")) {
storm.data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"))
}
# Some adjustment of event names to prevent major splitting of the data
storm.data$EVTYPE <- as.factor(gsub("THUNDERSTORM", "TSTM", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("WINDS", "WIND", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("FLOODING", "FLOOD", storm.data$EVTYPE))
# Conversion of the expense units into multiplication factor
storm.data$PROPDMGEXP <- gsub("[^HhKkMmBb]", "1", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Hh]", "100", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Kk]", "1000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Bb]", "1000000000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP[storm.data$PROPDMGEXP == ""] <- "1"
storm.data$PROPDMGEXP <- as.numeric(storm.data$PROPDMGEXP)
# Conversion of the expense units into multiplication factor
storm.data$CROPDMGEXP <- gsub("[^HhKkMmBb]", "1", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP <- gsub("[Hh]", "100", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP <- gsub("[Kk]", "1000", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP <- gsub("[Bb]", "1000000000", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP[storm.data$CROPDMGEXP == ""] <- "1"
storm.data$CROPDMGEXP <- as.numeric(storm.data$CROPDMGEXP)
summary(storm.data$CROPDMGEXP)
summary(as.factor(storm.data$PROPDMGEXP))
summary(storm.data$PROPDMG)
setwd("c:/Users/David/Documents/GitHub/Storm/")
if (!exists("storm.data")) {
storm.data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"))
}
# Some adjustment of event names to prevent major splitting of the data
storm.data$EVTYPE <- as.factor(gsub("THUNDERSTORM", "TSTM", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("WINDS", "WIND", storm.data$EVTYPE))
storm.data$EVTYPE <- as.factor(gsub("FLOODING", "FLOOD", storm.data$EVTYPE))
# Conversion of the expense units into multiplication factor
storm.data$PROPDMGEXP <- gsub("[^HhKkMmBb]", "1", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Hh]", "100", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Kk]", "1000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP <- gsub("[Bb]", "1000000000", storm.data$PROPDMGEXP)
storm.data$PROPDMGEXP[storm.data$PROPDMGEXP == ""] <- "1"
storm.data$PROPDMGEXP <- as.numeric(storm.data$PROPDMGEXP)
# Conversion of the expense units into multiplication factor
storm.data$CROPDMGEXP <- gsub("[^HhKkMmBb]", "1", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP <- gsub("[Hh]", "100", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP <- gsub("[Kk]", "1000", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP <- gsub("[Mm]", "1000000", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP <- gsub("[Bb]", "1000000000", storm.data$CROPDMGEXP)
storm.data$CROPDMGEXP[storm.data$CROPDMGEXP == ""] <- "1"
storm.data$CROPDMGEXP <- as.numeric(storm.data$CROPDMGEXP)
summary(storm.data$PROPDMG)
library(dplyr, warn.conflicts = FALSE, quietly=TRUE)
library(reshape2)
#health <- select(storm.data, EVTYPE, FATALITIES, INJURIES)
health <- storm.data %>%
select(EVTYPE, FATALITIES, INJURIES) %>%
group_by(EVTYPE) %>%
summarize(EVENTS = n(), FATALITIES = sum(FATALITIES), INJURIES = sum(INJURIES)) %>%
mutate(TOTINJ = FATALITIES + INJURIES) %>%
arrange(desc(TOTINJ))
# Reorder the factors according to arrangement for ggplot
health.topfive <- health[1:5,]
health.topfive$EVTYPE <- as.character(health.topfive$EVTYPE)
health.topfive$EVTYPE <- factor(health.topfive$EVTYPE, levels=unique(health.topfive$EVTYPE))
health.topfive <- melt(health.topfive, id = c("EVTYPE", "EVENTS"), measure.vars = c("FATALITIES","INJURIES"))
library(ggplot2)
ggplot(data=health.topfive, aes(x=EVTYPE, y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Health Impact") +
xlab("Event Type") +
ylab("# of Injuries & Fatalities")
ggplot(data=health.topfive, aes(x=EVTYPE, y=value, fill=variable)) +
+         geom_bar(stat="identity") +
+         ggtitle("Storm Events with Largest Health Impact") +
+         xlab("Event Type") +
+         ylab("# of Injuries & Fatalities")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost")
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost")
economy <- storm.data %>%
#select(EVTYPE, PROPDMGEXP, CROPDMGEXP) %>%
mutate(PROPDMG = PROPDMG * PROPDMGEXP, CROPDMG = CROPDMG * CROPDMGEXP) %>%
group_by(EVTYPE) %>%
summarize(EVENTS = n(), PROPDMGEXP = sum(PROPDMG), CROPDMGEXP = sum(CROPDMG)) %>%
mutate(TOTDMG = PROPDMG + CROPDMG) %>%
arrange(desc(TOTDMG))
# Reorder the factors according to arrangement for ggplot
economy.topfive <- economy[1:5,]
economy.topfive$EVTYPE <- as.character(economy.topfive$EVTYPE)
economy.topfive$EVTYPE <- factor(economy.topfive$EVTYPE, levels=unique(economy.topfive$EVTYPE))
economy.topfive <- melt(economy.topfive, id = c("EVTYPE", "EVENTS"), measure.vars = c("PROPDMGEXP","CROPDMGEXP"))
economy.topfive
economy <- storm.data %>%
#select(EVTYPE, PROPDMGEXP, CROPDMGEXP) %>%
mutate(PROPDMG = PROPDMG * PROPDMGEXP, CROPDMG = CROPDMG * CROPDMGEXP) %>%
group_by(EVTYPE) %>%
summarize(EVENTS = n(), PROPDMG = sum(PROPDMG), CROPDMG = sum(CROPDMG)) %>%
mutate(TOTDMG = PROPDMG + CROPDMG) %>%
arrange(desc(TOTDMG))
# Reorder the factors according to arrangement for ggplot
economy.topfive <- economy[1:5,]
economy.topfive$EVTYPE <- as.character(economy.topfive$EVTYPE)
economy.topfive$EVTYPE <- factor(economy.topfive$EVTYPE, levels=unique(economy.topfive$EVTYPE))
economy.topfive <- melt(economy.topfive, id = c("EVTYPE", "EVENTS"), measure.vars = c("PROPDMG","CROPDMG"))
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost")
economy.topfive
1e11/1e9
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost ($Billion USD)") +
theme(legend.position=c(1,1))
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost ($Billion USD)") +
theme(legend.position=c(1,1))
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost ($Billion USD)") +
theme(legend.position=c(0.8,0.8))
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost ($Billion USD)") +
theme(legend.position=c(0.9,0.8))
library(ggplot2)
ggplot(data=health.topfive, aes(x=EVTYPE, y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Health Impact") +
xlab("Event Type") +
ylab("# of Injuries & Fatalities") +
theme(legend.position=c(0.9,0.8))
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost ($Billion USD)") +
theme(legend.position=c(0.9,0.8), legend.title=element.blank())
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost ($Billion USD)") +
theme(legend.position=c(0.9,0.8), legend.title=element_blank())
ggplot(data=economy.topfive, aes(x=EVTYPE,y=value, fill=variable)) +
geom_bar(stat="identity") +
ggtitle("Storm Events with Largest Economic Impact") +
xlab("Event Type") +
ylab("Total Cost ($Billion USD)") +
theme(legend.position=c(0.9,0.8), legend.title=element_blank()) +
scale_fill_discrete(labels=c("Property\nDamage", "Crop\nDamage"))
